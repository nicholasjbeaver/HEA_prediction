# import standard modules
import logging
import sys
import json
import os
import argparse
from dataclasses import dataclass, asdict


# import 3rd party modules

# import local modules
from gcp_utils.settings import (
    GOOGLE_CLOUD_PROJECT,
    GOOGLE_COMPUTE_REGION,
    GOOGLE_PUBSUB_TOPIC,
    logger
)

# import common modules
from gcp_utils import pubsub
import cloud_processor

# set the logging level to always be DEBUG in this module
logger.setLevel(logging.DEBUG)

def run_prediction_server():
    # Define your data and attributes.  These are optional and only used for filtering messages.
    attributes = {}
    sub_topic_id = GOOGLE_PUBSUB_TOPIC 
    pub_topic_id = GOOGLE_PUBSUB_TOPIC 

    logger.info(f"Creating a subscription for topic: {sub_topic_id}")
    subscription_id = pubsub.subscription(topic_id=sub_topic_id, subscription_id="prediction_server", **attributes)

    logger.debug(f'Created a subscription: {subscription_id}')
    pubsub.delete_when_done(name=subscription_id)

    # loop until receiving a signal to exit.
    try:
        while True:
            # Pull the message
            logging.debug(f"Pull messages: on {pub_topic_id} using subscription {subscription_id}")
            messages = pubsub.pull(topic_id=sub_topic_id, subscription_id=subscription_id)

            # Print the messages
            for message in messages:
                logger.info(f'Received message: {message.text} with attributes: {message.attributes}')

                # convert message.text to a dataclass
                data = cloud_processor.input_message(**json.loads(message.text))

                # process the message
                cloud_processor.process_message(data)

    except Exception as e:
        logger.exception(e)
    except KeyboardInterrupt:
        logger.info(f'keyboard interrupt received...exiting')

    # delete the subscription
    logger.info(f'deleting subscription: {subscription_id}')
    pubsub.delete(name=subscription_id)


# main function
if __name__ == "__main__":

    # check input flags for --server
    parser = argparse.ArgumentParser()
    parser.add_argument("--server", help="Run the prediction server", action="store_true", default=True)

    # parse the input arguments 
    args = parser.parse_args()

    if args.server:
        run_prediction_server()

    # exit the program
    sys.exit(0)



