# import standard modules
import logging
import sys
import json
import os
import argparse
from dataclasses import dataclass, asdict
import pandas as pd

# import 3rd party modules

# import local modules
from gcp_utils.settings import (
    GOOGLE_CLOUD_PROJECT,
    GOOGLE_COMPUTE_REGION,
    GOOGLE_PUBSUB_TOPIC,
    logger
)

# import common modules
from gcp_utils import pubsub
from cloud_processor import input_message


# set the logging level to always be DEBUG in this module
logger.setLevel(logging.DEBUG)

def run_prediction_client():
    """
    run the prediction client using command line input

    """

    # loop getting command line input, exit loop when ctrl+c
    while True:
        try:
            # input an alloy
            alloy = input("Enter an alloy to predict: ")
            if alloy == "exit":
                break

            # input a crystal type
            crystal = input("Enter a crystal type: ")
            if crystal == "exit":
                break

            # input True/False to specify whether to do relaxation
            do_relaxation = input("Enter True (do relaxation) or False (no relaxation): ")
            
            if do_relaxation == "exit":
                break

            # Convert the input string to a boolean
            try:
                do_relaxation = bool(eval(do_relaxation))

            except (ValueError, SyntaxError):
                logging.error("Invalid input. Please enter either True or False.")
                # Handle the invalid input (just restart the while loop)
                continue

            # create dataclass with input data
            data = input_message(alloy, crystal, do_relaxation)
            logger.debug(f"dataclass to be sent to prediction server: {data}")

            # publish the dataclass to pubsub
            publish_input_message(data)
        
        except KeyboardInterrupt:
            logger.info(f'keyboard interrupt received...exiting')
            sys.exit(0)


def run_prediction_client_with_file(filename):    
    """
    run the prediction client using a csv file

    Args:
        filename (str): the name of the csv file

    """

    # make df of the csv for ease of use
    df = pd.read_csv(filename)

    # iterate over rows of input file and turn into json objects    
    for index, row in df.iterrows():

        # convert a row to a dict
        row_dict = row.to_dict()

        # convert the dict to a input_message dataclass by using kwargs
        # columns in the file need to match the fields of the dataclass
        data = input_message(**row_dict)
        logging.debug(f"dataclass to be sent to prediction server: {data}")
        
        publish_input_message(data)


def publish_input_message(data: input_message):
    """
    publish a input_message dataclass to pubsub

    Args:
        data (input_message): the dataclass to be published

    Returns:
        bool: True if successful, False if not

    """

    pub_topic_id = GOOGLE_PUBSUB_TOPIC

    # convert dataclass to json
    msg_data = json.dumps(asdict(data)).encode('utf-8')

    logger.debug(f"Publish the message: {msg_data} on topic {pub_topic_id}")

    # Define your data and attributes.  These are optional and only used for filtering messages.
    attributes = {}
    future = pubsub.publish(msg_data, topic_id=pub_topic_id, **attributes)
    result = future.result()

    try:
        # This will block until the message is published
        message_id = future.result()
        logger.debug(f"Message successfully published with ID: {message_id}")
        return True
    except Exception as e:
        logger.error(f"An error occurred: {e}")
        return False


# main function
if __name__ == "__main__":

    # create the parser
    parser = argparse.ArgumentParser()

    # check input flags for --client
    parser.add_argument("-cli", help="Run the prediction client using command line input", action="store_true")

    # check for an input file and then get the filename
    # check input flags for --file
    parser.add_argument("-file", help="Run the prediction client using the specified file", action="store", default=None)

    # parse the input arguments 
    args = parser.parse_args()

    if args.cli:
        run_prediction_client()
    elif args.file:
        # get the filename from the command line
        file_name = args.file
        logger.info(f"file name: {file_name}")
        run_prediction_client_with_file(file_name)
    else:
        logger.error("Please specify either -cli or -file")

   