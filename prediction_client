# import standard modules
import logging
import sys
import json
import os
import argparse
from dataclasses import dataclass, asdict
import pandas as pd


# import 3rd party modules

# import local modules
from gcp_utils.settings import (
    GOOGLE_CLOUD_PROJECT,
    GOOGLE_COMPUTE_REGION,
    GOOGLE_PUBSUB_TOPIC,
    logger
)

# import common modules
from gcp_utils import pubsub
from cloud_processor import input_message


# set the logging level to always be DEBUG in this module
logger.setLevel(logging.DEBUG)

def run_prediction_client():

    pub_topic_id = GOOGLE_PUBSUB_TOPIC

    # loop getting command line input, exit loop when ctrl+c
    while True:
        try:
            # input an alloy
            alloy = input("Enter an alloy to predict: ")
            if alloy == "exit":
                break

            # input a crystal type
            crystal = input("Enter a crystal type: ")
            if crystal == "exit":
                break

            # input True/False to specify whether to do relaxation
            do_relaxation = input("Enter True (do relaxation) or False (no relaxation): ")
            
            if do_relaxation == "exit":
                break

            # Convert the input string to a boolean
            try:
                do_relaxation = bool(eval(do_relaxation))

            except (ValueError, SyntaxError):
                print("Invalid input. Please enter either True or False.")
                # Handle the invalid input (e.g., ask the user again or exit the program)
                break
            

        except KeyboardInterrupt:
            logger.info(f'keyboard interrupt received...exiting')
            sys.exit(0)

            break

        # create dataclass with inputte data
        data = input_message(alloy, crystal, do_relaxation)
        logger.debug(f"dataclass to be sent to prediction server: {data}")

        # convert dataclass to json
        data = json.dumps(asdict(data)).encode('utf-8')
        logger.info(f"json message to publish: {data}")

        # Define your data and attributes.  These are optional and only used for filtering messages.
        attributes = {}
        
        # Publish the message
        logger.debug(f"Publish the message: {data} on topic {pub_topic_id}")
        future = pubsub.publish(data, topic_id=pub_topic_id, **attributes)
        result = future.result()



def run_prediction_client_with_file(filename):    
    """
    run the prediction client using a csv file

    """
    pub_topic_id = GOOGLE_PUBSUB_TOPIC

    # make df of the csv for ease of use
    df = pd.read_csv(filename)

    # iterate over rows of input file and turn into json objects    
    for index, row in df.iterrows():

        # make json message out of a row made into a dictionary
        json_message = json.dumps(row.to_dict()).encode('utf-8')

        try:
            json_object = json.loads(json_message)
            logger.info('good json')
        except json.JSONDecodeError as e:
            logger.info('bad json')

        logger.debug(f"Publish the message: {json_message} on topic {pub_topic_id}")

        # Define your data and attributes.  These are optional and only used for filtering messages.
        attributes = {}
        future = pubsub.publish(json_message, topic_id=pub_topic_id, **attributes)
        result = future.result()


# main function
if __name__ == "__main__":


    parser = argparse.ArgumentParser()

    # check input flags for --client
    parser.add_argument("-cli", help="Run the prediction client using command line input", action="store_true")

    # check for an input file and then get the filename
    # check input flags for --file
    parser.add_argument("-file", "--filename", help="Run the prediction client using the specified file", action="store", default=None)


    # parse the input arguments 
    args = parser.parse_args()

    filename = args.filename

    if args.cli:
        run_prediction_client()
    elif args.filename:
        # get the filename from the command line
        file_name = filename
        logger.info(f"file name: {file_name}")
        run_prediction_client_with_file(file_name)
    else:
        pass
